package com.bpmco.tramitefacil.Database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import com.bpmco.tramitefacil.DTO.Ciudadano;
import com.bpmco.tramitefacil.DTO.Elemento;
import com.bpmco.tramitefacil.DTO.Tramite;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by smarin on 2/10/13.
 */
public class DBHandlerElemento {


    private SQLiteDatabase db;
    private String _tabla;

    private static DBHandlerElemento instance = null;

    private static final String createTabla = "CREATE TABLE frm_trf_elemento (eleId INTEGER PRIMARY KEY AUTOINCREMENT, traId TEXT, eleFormEleId TEXT, eleTipo TEXT, eleEtiqueta TEXT, eleOpciones TEXT ,eleRequerido TEXT, eleValidacion TEXT, elePagina INTEGER, eleOrden TEXT)";

    private synchronized static void createInstance(SQLiteDatabase db, String tabla)
    {
        instance = new DBHandlerElemento(db,tabla);
    }

    public static DBHandlerElemento getInstance(SQLiteDatabase db, String tabla)
    {
        if(instance == null)
        {
            createInstance(db, tabla);
        }
        return instance;
    }

    private DBHandlerElemento(SQLiteDatabase db, String tabla)
    {
        this.db = db;
        this._tabla = tabla;
    }

    public void creartabla()
    {
        db.execSQL(createTabla);
        initData();
    }


    public void initData()
    {
        List<Elemento> listaElementos  = new ArrayList<Elemento>();

        Elemento elmDireccion = new Elemento();
        elmDireccion.setTramiteId("1");
        elmDireccion.setOrden("1");
        elmDireccion.setTipo("t");
        elmDireccion.setRequerido("true");
        elmDireccion.setEtiqueta("Lugar donde tiene el problema");
        elmDireccion.setPagina("1");
        elmDireccion.setId("1");

        Elemento elmBarrio = new Elemento();
        elmBarrio.setTramiteId("1");
        elmBarrio.setOrden("2");
        elmBarrio.setTipo("r");
        elmBarrio.setRequerido("true");
        elmBarrio.setEtiqueta("Barrio o vereda");
        elmBarrio.setPagina("1");
        elmBarrio.setOpciones("Barrio;Vereda");
        elmBarrio.setGrupo("TLUG");
        elmBarrio.setId("2");

        Elemento elmLabelAfectado = new Elemento();
        elmLabelAfectado.setTramiteId("1");
        elmLabelAfectado.setOrden("3");
        elmLabelAfectado.setTipo("l");
        elmLabelAfectado.setEtiqueta("Informacion del Afectado");
        elmLabelAfectado.setPagina("1");
        elmLabelAfectado.setId("3");

        Elemento elmIdent = new Elemento();
        elmIdent.setTramiteId("1");
        elmIdent.setOrden("4");
        elmIdent.setTipo("t");
        elmIdent.setRequerido("true");
        elmIdent.setEtiqueta("Numero de identificacion");
        elmIdent.setPagina("1");
        elmIdent.setId("4");

        Elemento elmEdadAnio = new Elemento();
        elmEdadAnio.setTramiteId("1");
        elmEdadAnio.setOrden("5");
        elmEdadAnio.setTipo("t");
        elmEdadAnio.setRequerido("true");
        elmEdadAnio.setEtiqueta("Anios");
        elmEdadAnio.setPagina("1");
        elmEdadAnio.setId("5");

        Elemento elmEdadMes = new Elemento();
        elmEdadMes.setTramiteId("1");
        elmEdadMes.setOrden("6");
        elmEdadMes.setTipo("s");
        elmEdadMes.setRequerido("true");
        elmEdadMes.setEtiqueta("Edad Mes");
        elmEdadMes.setOpciones("1;2");
        elmEdadMes.setGrupo("AMES");
        elmEdadMes.setPagina("1");
        elmEdadMes.setId("6");

        listaElementos.add(elmLabelAfectado);
        listaElementos.add(elmEdadAnio);
        listaElementos.add(elmIdent);
        listaElementos.add(elmBarrio);
        listaElementos.add(elmDireccion);

        createElements(listaElementos);
    }


    public boolean createElements(List<Elemento> elements)
    {
        Integer errors = 0;
        for(int i = 0; i<elements.size();i++)
        {
            String opciones = "";
            long id = 0;
            try
            {
                this.db.beginTransaction();
                Elemento element = elements.get(i);

                ContentValues values = new ContentValues();
                values.put("traId", element.getTramiteId());
                values.put("eleFormEleId", "");
                values.put("eleTipo", element.getTipo());
                values.put("eleEtiqueta", element.getEtiqueta());

                if(element.getOpciones() != null){
                    opciones = element.getOpciones();
                }

                values.put("eleOpciones", opciones);
                values.put("eleRequerido", element.getRequerido());
                values.put("eleValidacion", element.getValidacion());
                values.put("elePagina", element.getPagina());
                values.put("eleOrden", element.getOrden());

                id = this.db.insert(this._tabla, null, values);
                this.db.setTransactionSuccessful();
                this.db.endTransaction();
            }
            catch(Exception ex)
            {
                errors++;
            }
        }

        if(errors > 0)
        {
            return false;
        }
        return true;
    }


    public List<Elemento> getElementos(String pagina, String idTramite)
    {
        return getElementos(pagina, idTramite, null);
    }

    public List<Elemento> getElementos(String pagina, String idTramite, String idRegistro)
    {
        List<Elemento> listaElementos  = new ArrayList<Elemento>();
        String selectQuery = "SELECT e.eleId,e.traId,e.eleFormEleId,e.eleTipo,e.eleEtiqueta,e.eleOpciones,e.eleRequerido,e.eleValidacion,e.elePagina,e.eleOrden ";

        if(idRegistro != null)
            selectQuery += ",r.resValor ";

        selectQuery += "FROM " + this._tabla + " as e ";

        if(idRegistro != null)
            selectQuery += "LEFT JOIN frm_trf_elementoRespuesta r ON e.eleId = r.eleId AND r.regId = '" + idRegistro + "' ";

        selectQuery += "WHERE e.traId = '" + idTramite + "' ";

        if(pagina != "0")
            selectQuery += " AND e.elePagina = '" + pagina + "' ";

        selectQuery += "ORDER BY e.elePagina, e.eleOrden ";

        Cursor cursor = db.rawQuery(selectQuery, null);
        Elemento objElemento = null;
        if (cursor.moveToFirst()) {
            do {
                objElemento = new Elemento();
                objElemento.setId(cursor.getString(0));
                objElemento.setTramiteId(cursor.getString(1));
                objElemento.setFormId(cursor.getString(2));
                objElemento.setTipo(cursor.getString(3));
                objElemento.setEtiqueta(cursor.getString(4));
                objElemento.setOpciones(cursor.getString(5));
                objElemento.setRequerido(cursor.getString(6));
                objElemento.setValidacion(cursor.getString(7));
                objElemento.setPagina(cursor.getString(8));
                objElemento.setOrden(cursor.getString(9));
                if(idRegistro != null)
                    objElemento.setRepuesta(cursor.getString(10));
                else
                    objElemento.setRepuesta("");

                listaElementos.add(objElemento);
            } while (cursor.moveToNext());
        }
        return listaElementos;
    }


    public String getMaxPages(Tramite tramite)
    {
        String paginas = "0";
        String selectQuery = "SELECT max(elePagina) FROM frm_trf_elemento WHERE traId = " + tramite.getTraId();

        Cursor cursor = db.rawQuery(selectQuery, null);

        if (cursor.moveToFirst()) {
            paginas = cursor.getString(0);
        }

        return paginas;
    }

}
