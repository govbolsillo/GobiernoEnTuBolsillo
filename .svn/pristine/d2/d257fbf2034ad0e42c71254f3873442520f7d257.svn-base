package com.Wsdl2Code.WebServices.pqrdService;

import android.os.AsyncTask;

import com.bpmco.tramitefacil.DTO.Ciudadano;
import com.bpmco.tramitefacil.DTO.Elemento;
import com.bpmco.tramitefacil.DTO.Registro;
import com.bpmco.tramitefacil.Database.DatabaseHandler;

import java.util.Iterator;
import java.util.List;

/**
 * Created by jgonzalez on 16/10/13.
 * http://smartphonebysachin.blogspot.com/2012/11/how-to-return-value-from-async-task-in.html
 */
public class registrarPqrAsync extends AsyncTask<Void, Void, Void> {
    private DatabaseHandler manejador;

    private String regId;
    private Registro reg;
    private Ciudadano ciu;

    private registroPQRDVO pqr;
    private respuestaRegistroVO pqrResp;
    private VectorByte foto;
    private VectorByte video;
    private archivoAdjuntoVO fotoA;
    private archivoAdjuntoVO videoA;

    public String getRegId() {return regId;}
    public void setRegId(String regId) {this.regId = regId;}

    @Override
    protected Void  doInBackground(Void... params) {
        if (onAsyncResult != null) {
            pqrdService client = new pqrdService();
            try
            {
                manejador = DatabaseHandler.getInstance();
                setPQR();

                pqrResp = client.registrarPqr(pqr, videoA, video, fotoA, foto);
                if(pqrResp.mensajeError.equals("OK"))
                {
                    reg.setRadicacion(pqrResp.numRadicado+"");
                    reg.setVigencia(pqrResp.anno);
                    reg.setStatus(Registro.Status.RADICADO.toString());
                    manejador.getHandlerRegistro().save(reg);

                    onAsyncResult.onResultSuccess(0, pqrResp.numRadicado + "-" + pqrResp.anno, pqrResp);
                }
                else
                    onAsyncResult.onResultFail(1, pqrResp.mensajeError);

            }
            catch (Exception e)
            {
                e.printStackTrace();
                onAsyncResult.onResultFail(2, "Error no definido");
            }
        }
        return null;
    }

    OnAsyncResult onAsyncResult;
    public void setOnResultListener(OnAsyncResult onAsyncResult) {
        if (onAsyncResult != null) {
            this.onAsyncResult = onAsyncResult;
        }
    }

    public interface OnAsyncResult {
        public abstract void onResultSuccess(int resultCode, String message, respuestaRegistroVO pqrResult);
        public abstract void onResultFail(int resultCode, String errorMessage);
    }

    protected void onProgressUpdate() {
    }

    protected void onPostExecute() {
    }

    private int setPQR(){
        pqr = new registroPQRDVO();
        reg =  manejador.getHandlerRegistro().getById(regId);
        Ciudadano ciu =  manejador.getHandlerCiudadano().getCiudadano(reg.getCiuId() + "");

        //TODO: Debe ajustarse la DB y el combo a Long
        pqr.tipoIdentificacion = 10;//ciu.getTipoDoc();
        //pqr.tipoIdentificacionSpecified = true;
        pqr.idCiudadano = ciu.getDocumento();
        //TODO: tomar la fecha del sistema y formatear
        pqr.fechaSolicitud = "2013-10-16T13:20:00-05:00";
        //pqr.fechaSolicitudSpecified = true;
        //TODO: tomar el tipo de PQR de los elementos
        pqr.tipoPQRD = "8";

        pqr.nombres = ciu.getNombres();
        pqr.apellidos = ciu.getApellidos();
        pqr.email = ciu.getEmail();
        pqr.telefonos = ciu.getTelefono();// + " - " + ciu.getCelular();

        pqr.direccion = ciu.getDireccion();
        //TODO: falta agregar a la DB y al DTO la ciudad
        pqr.ciudad = "Manizales";

        //TODO: tomar las coordenadas
        pqr.coordenadasGPS = "5.055460801404837,-75.4915052"; //reg.getGeo();

        //TODO: tomar el lugar de los elementos
        pqr.lugarDireccion = ciu.getDireccion();
        pqr.motivoSolicitud = getMotivo();

        setFoto();
        setVideo();

        return 0;
    }

    private String getMotivo() {
        String motivo = "";
        List<Elemento> listaElementos =
                manejador.getHandlerElemento().getElementos("0", reg.getTraId()+"", reg.getId()+"");

        Iterator<Elemento> iterator = listaElementos.iterator();
        while(iterator.hasNext()){
            Elemento elemento = iterator.next();
            motivo += elemento.getEtiqueta() + ":" + elemento.getRepuesta();
        }
        return motivo;
    }

    private int setFoto(){
        /*
        Bitmap bm = BitmapFactory.decodeFile("/storage/extSdCard/Download/Manizales-StartupWeekend-14.jpeg");
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bm.compress(Bitmap.CompressFormat.JPEG, 100, baos); //bm is the bitmap object
        foto = baos.toByteArray();
        */
        byte[] fotoB = null;
        fotoA = null;
        foto = null;
        return 0;
    }

    private int setVideo(){
        byte[] videoB = null;
        videoA = null;
        video = null;
        return 0;
    }
}
